# -*- coding: utf-8 -*-
"""heart disease.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16Ci4i9WZaUQcKsrzveCFFsw525V8rndG
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

"""import the file"""

heart_data = pd.read_csv('/content/heart.csv')

heart_data.head()

heart_data.shape

heart_data.info()

heart_data.columns

heart_data.describe()

heart_data.isnull().sum()

heart_data['target'].value_counts()

correlation = heart_data.corr()
print(correlation)

plt.figure(figsize=(11,6))
sns.heatmap(correlation,annot=True,cmap='Blues')

plt.figure(figsize=(10,5))
sns.barplot(x='age',y='target',data=heart_data)

X = heart_data.drop('target',axis=1)
y = heart_data['target']

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=2)

print(X_train.shape, X_test.shape)
print(y_train.shape, y_test.shape)

"""now we will standardize the values"""

from sklearn.preprocessing import StandardScaler

sc = StandardScaler()

X_train = sc.fit_transform(X_train)
X_test = sc.transform(X_test)

print(X_train)

print(X_test)

"""now fit the model"""

from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score,confusion_matrix
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score

knn = KNeighborsClassifier(n_neighbors=3)

"""to get the better N_neighbors"""

k_values = range(1, 21)
accuracies = []

for k in k_values:
    knn = KNeighborsClassifier(n_neighbors=k)
    knn.fit(X_train, y_train)
    y_pred = knn.predict(X_test)
    accuracy = accuracy_score(y_test, y_pred)
    accuracies.append(accuracy)

plt.figure(figsize=(8, 5))
plt.plot(k_values, accuracies, marker='o')
plt.title('Elbow Method for Optimal k in k-NN')
plt.xlabel('Number of Neighbors (k)')
plt.ylabel('Accuracy')
plt.xticks(k_values)
plt.grid()
plt.show()

knn.fit(X_train,y_train)

prediction = knn.predict(X_test)

score = accuracy_score(y_test,prediction)
print(score)

mae = mean_absolute_error(y_test, prediction)
print(f"Mean Absolute Error (MAE): {mae:.2f}")

mse = mean_squared_error(y_test, prediction)
print(f"Mean Squared Error (MSE): {mse:.2f}")

rmse = np.sqrt(mse)
print(f"Root Mean Squared Error (RMSE): {rmse:.2f}")

r2 = r2_score(y_test, prediction)
print(f"RÂ² Score: {r2:.2f}")

input_data = (62,0,0,140,268,0,0,160,0,3.6,0,2,2)
input_data_as_numpy_array= np.asarray(input_data)
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)
prediction = knn.predict(input_data_reshaped)
print(prediction)
if (prediction[0]== 0):
  print('The Person does not have a Heart Disease')
else:
  print('The Person has Heart Disease')

