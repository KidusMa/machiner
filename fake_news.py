# -*- coding: utf-8 -*-
"""fake news.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1EoP5gnk1rysxrW95QmtRdwmx1Bhm4160
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.linear_model import LogisticRegression
import re
from nltk.corpus import stopwords
from nltk.stem.porter import PorterStemmer
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score

import nltk

nltk.download('stopwords')

print(stopwords.words('english'))

df_fake = pd.read_csv('/content/Fake.csv')
df_true = pd.read_csv('/content/True.csv')

df_fake.head(5)

df_true.head()

print(df_fake.shape,df_true.shape)

"""from the given data set there is no labeled data so we create a column which is called 'class'"""

df_fake['class']=0
df_true['class']=1

"""now we will merge the fake and true data set"""

df_merged = pd.concat([df_fake,df_true],axis=0)

print(df_merged.shape)

"""we will chek if there is a missing value"""

df_merged.isnull().sum()

"""drop columns which are not much valuable"""

df_new = df_merged.drop(['subject','date','title'],axis=1)

df_new.head(5)

"""separeting dependent(labled) and independent variable"""

X = df_new['text']
y = df_new['class']

"""we will stem the text and title"""

port_stem = PorterStemmer()

def stemin(text):
    text = re.sub('[^a-zA-Z]',' ',text)
    text = text.lower()
    text = text.split()
    text = [port_stem.stem(word) for word in text if not word in stopwords.words('english')]
    text = ' '.join(text)
    return text

df_new['text'] = df_new['text'].apply(stemin)

print(df_new['text'])

X = df_new['text']
y = df_new['class']

print(X)

"""converting the textual data to numerical"""

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=1)

vectorized = TfidfVectorizer()
train_X= vectorized.fit_transform(X_train)
test_X = vectorized.transform(X_test)

print(train_X)

"""train model"""

lg = LogisticRegression()
lg.fit(train_X,y_train)

predictions = lg.predict(test_X)

score = accuracy_score(predictions,y_test)

print('accuracy_score on test data :',score)

X_new = test_X[1]

prediction = lg.predict(X_new)
print(prediction)

if (prediction[0]==0):
  print('The news is Real')
else:
  print('The news is Fake')

